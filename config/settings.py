"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 환경 변수 로드
env = environ.Env(
    DEBUG=(bool, False)  # DEBUG 값을 boolean으로 변환, 기본값 False
)

# .env 파일 로드
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = (
    ["localhost", "127.0.0.1"] if DEBUG else env.list("ALLOWED_HOSTS", default=[])
)


CORS_ALLOWED_ORIGINS = (
    # 프론트엔드가 실행되는 주소 (라이브 서버 플러그인 사용 시)
    ["http://localhost:5500","http://127.0.0.1:5500"]
    if DEBUG
    else env.list("CORS_ALLOWED_ORIGINS", default=[])
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party apps
    'rest_framework',
    "rest_framework_simplejwt",
    'rest_framework.authtoken',
    'corsheaders',

    'dj_rest_auth',  # REST API 인증 추가

    'allauth',
    'allauth.account',  # 이메일 로그인 지원
    
    'allauth.socialaccount',  # 소셜 로그인 지원
    'allauth.socialaccount.providers.google',  # Google 소셜 로그인 지원

    # Local apps
    'accounts',
]


SITE_ID = 1


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'corsheaders.middleware.CorsMiddleware', # corsheaders 미들웨어 추가
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # django-allauth의 AccountMiddleware
    "allauth.account.middleware.AccountMiddleware",
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # 기본 Django 인증
    'allauth.account.auth_backends.AuthenticationBackend',  # 소셜 로그인 인증
]


REST_USE_JWT = True
JWT_AUTH_COOKIE = "access_token"  # JWT를 쿠키에 저장
JWT_AUTH_REFRESH_COOKIE = "refresh_token"  # 리프레시 토큰을 쿠키에 저장


# JWT 기반 인증만 사용할 경우 Token 모델 비활성화
DJ_REST_AUTH = {
    "TOKEN_MODEL": None
}


# JWT 토큰 설정 (액세스 & 리프레시)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),  # 추가
}



# 기본 로그인 필드 설정 (이메일 기반 로그인)
ACCOUNT_LOGIN_METHODS = {"email"}
# ACCOUNT_AUTHENTICATION_METHOD = "email"  # 이메일 로그인 사용
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"  # 이메일 인증


# 환경에 따라 Google OAuth 설정 다르게 적용
if DEBUG:  # 개발 환경
    GOOGLE_CLIENT_ID = env("GOOGLE_CLIENT_ID_LOCAL")
    GOOGLE_CLIENT_SECRET = env("GOOGLE_CLIENT_SECRET_LOCAL")
else:  # 운영 환경
    GOOGLE_CLIENT_ID = env("GOOGLE_CLIENT_ID_PROD")
    GOOGLE_CLIENT_SECRET = env("GOOGLE_CLIENT_SECRET_PROD")

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "openid",
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "OAUTH_PKCE_ENABLED": True,  # PKCE 사용 (보안 강화)
        "APP": {
            "client_id": GOOGLE_CLIENT_ID,
            "secret": GOOGLE_CLIENT_SECRET,
            "redirect_uris": [env("GOOGLE_REDIRECT_URI")
            ],
        },
    }
}


ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': (
        {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
        if DEBUG
        else env.db("DATABASE_URL")
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST framework settings
REST_FRAMEWORK = {
    # 1. 인증 방식 (JWT + 세션)
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # 일반 API
        'rest_framework.authentication.SessionAuthentication',  # Admin 페이지
    ),

    # 2. 기본 권한 (로그인한 사용자만 API 접근 가능)
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    # # 3. 페이지네이션 (한 페이지당 10개)
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,

    # # 4. 검색 및 필터링 기능
    # 'DEFAULT_FILTER_BACKENDS': [
    #     'django_filters.rest_framework.DjangoFilterBackend',  # 필터링
    #     'rest_framework.filters.SearchFilter',  # 검색
    #     'rest_framework.filters.OrderingFilter',  # 정렬
    # ],

    # # 5. 요청 제한 (과도한 요청 방지)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',  # 익명 사용자 제한
    #     'rest_framework.throttling.UserRateThrottle',  # 로그인 사용자 제한
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '10/minute',  # 익명 사용자는 1분에 10회 요청 가능
    #     'user': '100/minute',  # 로그인한 사용자는 1분에 100회 요청 가능
    # },

    # # 6. API 응답 포맷 (운영에서는 BrowsableAPIRenderer 제거)
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',  # JSON 응답
    #     'rest_framework.renderers.BrowsableAPIRenderer', # HTML 렌더링
    # ],

}
